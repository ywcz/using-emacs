#+STARTUP: overview
* base setting
  #+begin_src emacs-lisp
    ;;默认全屏
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    ;;设置gc
    (setq gc-cons-threshold most-positive-fixnum)
    (setq read-process-output-max (* 1024 1024))
    ;;删除选中
    (delete-selection-mode 1)
    ;;不生产备份文件
    (setq make-backup-files nil)
    ;;高亮当前行
    (global-hl-line-mode 1)
    ;;自动加载硬盘上修改过的文件
    (global-auto-revert-mode 1)
    ;;关闭提示音
    (setq ring-bell-function 'ignore)
    ;;开启org模板
    (require 'org-tempo)
    ;;使用y,no代替yes,no
    (fset 'yes-or-no-p 'y-or-n-p)
    ;;关闭初始信息页
    (setq inhibit-startup-message t)
    ;;设置文件默认编码
    (prefer-coding-system 'utf-8)
    ;;乱码问题
    (with-eval-after-load 'eshell (set-language-environment "utf-8"))
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8)
  #+end_src
* interface weaks
  #+begin_src emacs-lisp
    ;; 不显示工具栏
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1)

    ;; 更改显示字体大小
    (set-face-attribute 'default nil :font "FiraCode Nerd Font 12")
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
			charset (font-spec :family "KaiTi" :size 24)))
    (setq default-buffer-file-coding-system 'utf-8)
  #+end_src
* try
  #+begin_src emacs-lisp
    (use-package try
      :defer t)
  #+end_src
* which-key
  #+begin_src emacs-lisp
    (use-package which-key
      :defer t
      :config (which-key-mode)) 
  #+end_src
* org-bullets
  #+begin_src emacs-lisp
    (use-package org-bullets
      :defer t
      :config (add-hook 'org-mode-hook #'org-bullets-mode))
  #+end_src
* counsel
  #+begin_src emacs-lisp
    
  #+end_src
* ivy swiper counsel
  #+begin_src emacs-lisp
    (use-package ivy
      :defer t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))
    (use-package counsel
      :defer t
      :after ivy
      :bind (("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file)
	     ("C-c f" . counsel-recentf)
	     ("C-c g" . counsel-git)))
    (use-package swiper
      :defer t
      :after ivy
      :bind (("C-s" . swiper)
	     ("C-r" . swiper-isearch-backward))
      :config
      (setq swiper-action-recenter t
	    swiper-include-line-number-in-search t))
    (use-package ivy-posframe
      :ensure t
      :after ivy
      :diminish
      :config
      (setq ivy-posframe-display-functions-alist
	    '((swiper          . ivy-posframe-display-at-frame-center)
	      (complete-symbol . ivy-posframe-display-at-point)
	      (counsel-M-x     . ivy-posframe-display-at-frame-center)
	      (counsel-find-file . ivy-posframe-display-at-frame-center)
	      (ivy-switch-buffer . ivy-posframe-display-at-frame-center)
	      (t               . ivy-posframe-display-at-frame-center))))
(ivy-posframe-mode 1)
  #+end_src
* restart-emacs
  #+begin_src emacs-lisp
    (use-package restart-emacs
      :ensure t)
  #+end_src
* benchmark-init
  #+begin_src emacs-lisp
    (use-package benchmark-init
      :ensure t
      :config
      ;; To disable collection of benchmark data after init is done.
      (add-hook 'after-init-hook 'benchmark-init/deactivate))
  #+end_src
* company
  #+begin_src emacs-lisp
    (use-package company
      :defer t
      :config
      (add-hook 'after-init-hook 'global-company-mode))
  #+end_src
* monokai-theme
  #+begin_src emacs-lisp
    (use-package monokai-theme
      :defer t
      :init
      (load-theme 'monokai t))
  #+end_src
* web-mode
  #+begin_src emacs-lisp
    (use-package web-mode
  
      :config
      (setq web-mode-markup-indent-offset 2) ; web-mode, html tag in html file
      (setq web-mode-css-indent-offset 2)    ; web-mode, css in html file
      (setq web-mode-code-indent-offset 2)   ; web-mode, js code in html file
      (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode)))
  #+end_src
* ox-reveal
  #+begin_src emacs-lisp
    (use-package ox-reveal
      :defer t
      :config
      (reveal-mode 1))
    (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js/")
    (setq org-reveal-mathjax t)
    #+end_SRC
* csharp (tree-sitter, csharp-mode)
  #+begin_src emacs-lisp
    (use-package tree-sitter :defer t)
    (use-package tree-sitter-langs :defer t)
    (use-package tree-sitter-indent :defer t)

    (use-package csharp-mode
      :defer t
      :config
      (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode)))
  #+end_src
* lsp-mode
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :defer t
      :hook ((csharp-mode . lsp-deferred)
	     (web-mode . lsp-deferred)
	     (csharp-mode . lsp-deferred)
	     (lsp-mode . lsp-enable-which-key-integration))
      :commands (lsp lsp-deferred))
    (use-package lsp-ui
      :commands lsp-ui-mode)
    (use-package lsp-ivy
      :commands lsp-ivy-workspace-symbol)
    (use-package lsp-treemacs
      :commands lsp-treemacs-errors-list)
  #+end_src
* other
  ;;(setq indo-enable-flex-matching t)
  ;;(setq ido-everywhere t)
  ;;(ido-mode 1)
  ;;(defalias 'list-buffer)
  
